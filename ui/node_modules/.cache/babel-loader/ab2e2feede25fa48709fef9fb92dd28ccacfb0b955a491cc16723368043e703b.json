{"ast":null,"code":"import { rest } from 'msw';\n\n// ** mock data JSON\nimport leaderboard from './data/leaderboard.json';\n\n// Set URL to mock\nconst baseUrl = process.env.REACT_APP_API_URL || 'http://localhost:9000';\nexport const handlers = [\n// rest.get(`${baseUrl}/user/token`, (req, res, ctx) => { // capture \"GET /greeting\" requests\n\n//   return res(ctx.json({username: \"dantewanders\"})) // respond using a mocked JSON body\n// }),\n// rest.get(`${baseUrl}/leaderboard`, (req, res, ctx) => { // capture \"GET /greeting\" requests\n//   return res(ctx.json(leaderboard)) // respond using a mocked JSON body\n// }),\nrest.get(`${baseUrl}/leaderboard`, (req, res, ctx) => {\n  // capture \"GET /greeting\" requests\n  return res(ctx.json(leaderboard)); // respond using a mocked JSON body\n})\n// rest.get(`${baseUrl}/questions/random`, (req, res, ctx) => { // capture \"GET /greeting\" requests\n//   const result = getQuestion[Math.floor(Math.random()*getQuestion.length)]\n//   return res(ctx.json(result)) // respond using a mocked JSON body\n// }),\n// rest.get(`${baseUrl}/user/:username`, (req, res, ctx) => { // capture \"GET /greeting\" requests\n\n//   return res(ctx.json(getUserProfile)) // respond using a mocked JSON body\n// }),\n\n// rest.get(`${baseUrl}/game/:username`, (req, res, ctx) => { // capture \"GET /greeting\" requests\n\n//   return res(ctx.json(getGameHistory)) // respond using a mocked JSON body\n// }),\n// rest.get(`${baseUrl}/stats/:username`, (req, res, ctx) => { // capture \"GET /greeting\" requests\n\n//   return res(ctx.json(getGameStatistics)) // respond using a mocked JSON body\n// }),\n// rest.get('/farewell', (req, res, ctx) => { // capture \"GET /greeting\" requests\n//   return res(ctx.json({farewell: 'goodbye there'})) // respond using a mocked JSON body\n// })\n];","map":{"version":3,"names":["rest","leaderboard","baseUrl","process","env","REACT_APP_API_URL","handlers","get","req","res","ctx","json"],"sources":["/home/dantewanders/Code/Templates/CapstoneTemplate/ui/src/mocks/handlers.js"],"sourcesContent":["import { rest } from 'msw'\n\n// ** mock data JSON\nimport leaderboard from './data/leaderboard.json'\n\n// Set URL to mock\nconst baseUrl = process.env.REACT_APP_API_URL || 'http://localhost:9000'\n\nexport const handlers = [\n  // rest.get(`${baseUrl}/user/token`, (req, res, ctx) => { // capture \"GET /greeting\" requests\n   \n  //   return res(ctx.json({username: \"dantewanders\"})) // respond using a mocked JSON body\n  // }),\n  // rest.get(`${baseUrl}/leaderboard`, (req, res, ctx) => { // capture \"GET /greeting\" requests\n  //   return res(ctx.json(leaderboard)) // respond using a mocked JSON body\n  // }),\n  rest.get(`${baseUrl}/leaderboard`, (req, res, ctx) => { // capture \"GET /greeting\" requests\n    return res(ctx.json(leaderboard)) // respond using a mocked JSON body\n  }),\n  // rest.get(`${baseUrl}/questions/random`, (req, res, ctx) => { // capture \"GET /greeting\" requests\n  //   const result = getQuestion[Math.floor(Math.random()*getQuestion.length)]\n  //   return res(ctx.json(result)) // respond using a mocked JSON body\n  // }),\n  // rest.get(`${baseUrl}/user/:username`, (req, res, ctx) => { // capture \"GET /greeting\" requests\n   \n  //   return res(ctx.json(getUserProfile)) // respond using a mocked JSON body\n  // }),\n\n  // rest.get(`${baseUrl}/game/:username`, (req, res, ctx) => { // capture \"GET /greeting\" requests\n  \n  //   return res(ctx.json(getGameHistory)) // respond using a mocked JSON body\n  // }),\n  // rest.get(`${baseUrl}/stats/:username`, (req, res, ctx) => { // capture \"GET /greeting\" requests\n  \n  //   return res(ctx.json(getGameStatistics)) // respond using a mocked JSON body\n  // }),\n  // rest.get('/farewell', (req, res, ctx) => { // capture \"GET /greeting\" requests\n  //   return res(ctx.json({farewell: 'goodbye there'})) // respond using a mocked JSON body\n  // })\n]"],"mappings":"AAAA,SAASA,IAAI,QAAQ,KAAK;;AAE1B;AACA,OAAOC,WAAW,MAAM,yBAAyB;;AAEjD;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAExE,OAAO,MAAMC,QAAQ,GAAG;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACAN,IAAI,CAACO,GAAG,CAAE,GAAEL,OAAQ,cAAa,EAAE,CAACM,GAAG,EAAEC,GAAG,EAAEC,GAAG,KAAK;EAAE;EACtD,OAAOD,GAAG,CAACC,GAAG,CAACC,IAAI,CAACV,WAAW,CAAC,CAAC,EAAC;AACpC,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA,CACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}
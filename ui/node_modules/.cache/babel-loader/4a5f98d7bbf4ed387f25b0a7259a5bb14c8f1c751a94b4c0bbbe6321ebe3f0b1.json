{"ast":null,"code":"var _jsxFileName = \"/home/dantewanders/Code/Templates/CapstoneTemplate/ui/src/views/Gamemodes/Game/index.js\",\n  _s = $RefreshSig$();\nimport { Fragment } from 'react';\nimport { useEffect, useState } from 'react';\nimport Box from '@mui/material/Box';\nimport { getQuestion, sendGameResults } from '../../../utility/api.js';\nimport { getToken } from '../../../utility/utils.js';\nimport Question from './Question.js';\nimport GameTimer from './GameTimer';\nimport EndGameDialog from './EndGameDialog.js';\n\n// create an object to track question results\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet results = {\n  gameMode: undefined,\n  score: 0,\n  duration: 0,\n  responses: []\n};\n// responses expected shape: [{\n//   question_id: undefined,\n//   isCorrect: undefined\n// }]\n\nconst clearResults = () => {\n  results = {\n    gameMode: undefined,\n    score: 0,\n    duration: 0,\n    responses: []\n  };\n};\nlet isChecking = false;\nfunction Game(props) {\n  _s();\n  // get difficulty, category and game mode from props\n  const {\n    difficulty,\n    mode,\n    category\n  } = props;\n\n  // define the gameMode\n  if (!results.gameMode) {\n    results.gameMode = mode;\n  }\n  // console.log('props: ', props )\n\n  // define state variables\n  const [question, setQuestion] = useState(false);\n  const [highlight, setHighlight] = useState(false);\n  const [isEnd, setIsEnd] = useState(false);\n\n  // write a function to get game rules based on mode\n  // quick play\n  // if timer === 0 end the game\n  // 3 strikes\n  // if a strikes === 3 end the game\n  // fast 25\n  // if responses.length === 25 end the game\n\n  // fetch questions from the API using: game mode, difficulty, category\n  useEffect(() => {\n    if (!question) {\n      getQuestion(difficulty, category).then(data => {\n        setQuestion(data);\n      }).catch(error => {\n        console.log(error);\n      });\n    }\n  }, [difficulty, category, question]);\n\n  // set duration based on gamemode\n  useEffect(() => {\n    if (mode === \"Quick Play\") {\n      results.duration = '00:03:00';\n    }\n    // create a function to record how long the user takes during fast-25, 3 strikes\n  }, [mode]);\n\n  // write a function for when the question timer is up\n  // highlights the correct answer regardless if answered. \n  // move to next question\n  const getNextQuestion = response => {\n    console.log('getting next Question!');\n    // adds result to tracker\n    results.responses.push(response);\n    console.log(\"results: \", results);\n    // reset highlight\n    setHighlight(false);\n    // get next question\n    setQuestion(false);\n    isChecking = false;\n  };\n\n  // write a function that checks if a selected answer is correct. \n  const checkAnswer = selectedAnswer => {\n    if (isChecking) {\n      return console.log('still checking!');\n    }\n    console.log(selectedAnswer);\n    isChecking = true;\n    // highlight correct answer green if correct\n    // if the question is incorrect highlight incorrect red\n    // by changing highlight we can affect the question component by passing in the state variable as a prop\n    setHighlight(true);\n\n    // add a delay before getting next question\n    setTimeout(() => {\n      console.log(\"Delayed for 1.5 second.\");\n      return getNextQuestion({\n        question_id: question.question_id,\n        isCorrect: selectedAnswer === 'correct'\n      });\n    }, 1500);\n  };\n\n  // write a function that gives a result of gameplay through a results popup.\n  const endGame = () => {\n    //show game result dialog\n    setIsEnd(true);\n    // fetch request to send results to api\n    const token = getToken();\n    sendGameResults(token, results)\n    // .then(() => {clearResults()})\n    .catch(error => {\n      console.log(error);\n    });\n  };\n  const getGameDuration = () => {\n    // set duration based on game\n    if (mode === 'Quick Play') {\n      return 180;\n    }\n    return Infinity;\n  };\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: !isEnd ? /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        align: \"center\",\n        mt: \"30px\",\n        children: /*#__PURE__*/_jsxDEV(GameTimer, {\n          duration: getGameDuration(),\n          endGame: endGame\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Question, {\n        question: question,\n        checkAnswer: checkAnswer,\n        highlight: highlight\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this) :\n    /*#__PURE__*/\n    // give options for play again, or leaderboard\n    // if play again, write a function to reset the game\n    // leaderboard, redirect to /leaderboard\n    _jsxDEV(EndGameDialog, {\n      results: results\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n}\n_s(Game, \"Uvqtr16LN/yO+BYkiPS11N1ylwg=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["Fragment","useEffect","useState","Box","getQuestion","sendGameResults","getToken","Question","GameTimer","EndGameDialog","jsxDEV","_jsxDEV","results","gameMode","undefined","score","duration","responses","clearResults","isChecking","Game","props","_s","difficulty","mode","category","question","setQuestion","highlight","setHighlight","isEnd","setIsEnd","then","data","catch","error","console","log","getNextQuestion","response","push","checkAnswer","selectedAnswer","setTimeout","question_id","isCorrect","endGame","token","getGameDuration","Infinity","children","align","mt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/dantewanders/Code/Templates/CapstoneTemplate/ui/src/views/Gamemodes/Game/index.js"],"sourcesContent":["import { Fragment } from 'react'\nimport { useEffect, useState } from 'react'\nimport Box from '@mui/material/Box'\nimport { getQuestion, sendGameResults } from '../../../utility/api.js'\nimport { getToken } from '../../../utility/utils.js'\nimport Question from './Question.js'\nimport GameTimer from './GameTimer'\nimport EndGameDialog from './EndGameDialog.js'\n\n  // create an object to track question results\n  let results = {\n    gameMode: undefined,\n    score: 0,\n    duration: 0,\n    responses: []    \n  }\n    // responses expected shape: [{\n    //   question_id: undefined,\n    //   isCorrect: undefined\n    // }]\n\n  const clearResults = () => {\n    results = {\n      gameMode: undefined,\n      score: 0,\n      duration: 0,\n      responses: []    \n    }\n  }\n\nlet isChecking = false\nfunction Game(props) {\n  \n // get difficulty, category and game mode from props\n  const {\n    difficulty,\n    mode,\n    category\n  } = props\n\n  // define the gameMode\n  if (!results.gameMode) {\n    results.gameMode = mode\n  }\n  // console.log('props: ', props )\n\n  // define state variables\n  const [question, setQuestion] = useState(false)\n  const [highlight, setHighlight] = useState(false)\n  const [isEnd, setIsEnd] = useState(false)\n\n  // write a function to get game rules based on mode\n    // quick play\n      // if timer === 0 end the game\n    // 3 strikes\n      // if a strikes === 3 end the game\n    // fast 25\n      // if responses.length === 25 end the game\n\n  // fetch questions from the API using: game mode, difficulty, category\n  useEffect( () => {\n    if (!question) {\n      getQuestion(difficulty, category)\n      .then((data) => { setQuestion(data) })\n      .catch((error) => { console.log(error) })\n    }\n   }, [difficulty, category, question])\n  \n   // set duration based on gamemode\n   useEffect( () => {\n    if (mode === \"Quick Play\") {\n      results.duration = '00:03:00'\n    }\n    // create a function to record how long the user takes during fast-25, 3 strikes\n   }, [mode])\n  \n\n  // write a function for when the question timer is up\n    // highlights the correct answer regardless if answered. \n    // move to next question\n  const getNextQuestion = (response) => {\n    console.log('getting next Question!')\n    // adds result to tracker\n    results.responses.push(response)\n    console.log(\"results: \", results)\n    // reset highlight\n    setHighlight(false)\n    // get next question\n    setQuestion(false)\n    isChecking = false\n  }\n\n  // write a function that checks if a selected answer is correct. \n  const checkAnswer = (selectedAnswer) => {\n    if (isChecking) {\n      return console.log('still checking!')\n    }\n    console.log(selectedAnswer)\n    isChecking = true\n    // highlight correct answer green if correct\n    // if the question is incorrect highlight incorrect red\n    // by changing highlight we can affect the question component by passing in the state variable as a prop\n    setHighlight(true)\n\n    // add a delay before getting next question\n    setTimeout(() => {\n      console.log(\"Delayed for 1.5 second.\");\n      return getNextQuestion({\n        question_id: question.question_id,\n        isCorrect: selectedAnswer === 'correct'\n      })\n    }, 1500);\n  }\n\n  // write a function that gives a result of gameplay through a results popup.\n  const endGame = () => {\n    //show game result dialog\n    setIsEnd(true)\n    // fetch request to send results to api\n    const token = getToken()\n    sendGameResults(token, results)\n    // .then(() => {clearResults()})\n    .catch((error)=>{console.log(error)})\n  }  \n\n  const getGameDuration = () => {\n    // set duration based on game\n    if (mode === 'Quick Play') {\n      return 180\n    }\n    return Infinity\n  }\n\n  return (\n    <Fragment>\n      {/* Create a timer component (based on game mode) that controls the duration of each question */}\n      {/* Create a component to display question and 4 selectable answers */}\n      {!isEnd ? \n      <Fragment>\n\n        <Box align='center' mt='30px'>\n          <GameTimer\n            duration={getGameDuration()}\n            endGame={endGame}\n          />\n        </Box>\n        \n        <Question\n          question={question}\n          checkAnswer={checkAnswer}\n          highlight={highlight}\n        />\n        \n      </Fragment>\n      :\n      // give options for play again, or leaderboard\n      // if play again, write a function to reset the game\n      // leaderboard, redirect to /leaderboard\n      <EndGameDialog\n        results={results}\n      />\n      }\n\n    </Fragment>\n  )\n}\n\nexport default Game"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
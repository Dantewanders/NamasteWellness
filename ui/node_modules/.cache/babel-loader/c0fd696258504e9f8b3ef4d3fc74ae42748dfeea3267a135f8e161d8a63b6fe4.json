{"ast":null,"code":"/**\n * Checks if a user is currently logged in.\n *\n * @function\n * @returns {boolean} - True if a session token exists, otherwise false.\n */\nexport const isUserLoggedIn = () => {\n  const token = localStorage.getItem('session_token');\n  return token ? true : false;\n};\n\n/**\n * Retrieves the current session token.\n *\n * @function\n * @returns {string} - A session token as a string.\n */\nexport const getToken = () => {\n  const token = localStorage.getItem('session_token');\n  return token;\n};\n\n/**\n * Sets the session token in local storage.\n *\n * @function\n * @param {string} token - The session token to set.\n * @returns {string} - The session token that was set.\n * @throws {Error} - Throws an error if the token argument is not a string.\n */\nexport const setToken = token => {\n  if (typeof token !== 'string') {\n    throw new Error(\"token must be type: 'string'\");\n  }\n  localStorage.setItem('session_token', token);\n  return token;\n};\n\n/**\n * Removes the current session token from local storage.\n *\n * @function\n * @returns {boolean} - Always returns true.\n */\nexport const clearToken = () => {\n  localStorage.removeItem('session_token');\n  return true;\n};\n// randomizes an array\nexport const shuffle = array => array.sort((a, b) => 0.5 - Math.random());","map":{"version":3,"names":["isUserLoggedIn","token","localStorage","getItem","getToken","setToken","Error","setItem","clearToken","removeItem","shuffle","array","sort","a","b","Math","random"],"sources":["/home/dantewanders/Code/Templates/CapstoneTemplate/ui/src/utility/utils.js"],"sourcesContent":["/**\n * Checks if a user is currently logged in.\n *\n * @function\n * @returns {boolean} - True if a session token exists, otherwise false.\n */\nexport const isUserLoggedIn = () => {\n  const token = localStorage.getItem('session_token')\n  return token ? true : false\n}\n\n/**\n * Retrieves the current session token.\n *\n * @function\n * @returns {string} - A session token as a string.\n */\nexport const getToken = () => {\n  const token = localStorage.getItem('session_token')\n  return token\n}\n\n/**\n * Sets the session token in local storage.\n *\n * @function\n * @param {string} token - The session token to set.\n * @returns {string} - The session token that was set.\n * @throws {Error} - Throws an error if the token argument is not a string.\n */\nexport const setToken = (token) => {\n  if(typeof token !== 'string') {\n    throw new Error(\"token must be type: 'string'\")\n  }\n  localStorage.setItem('session_token', token)\n  return token\n}\n\n/**\n * Removes the current session token from local storage.\n *\n * @function\n * @returns {boolean} - Always returns true.\n */\nexport const clearToken = () => {\n  localStorage.removeItem('session_token')\n  return true\n}\n// randomizes an array\nexport const shuffle = (array) => array.sort((a, b) => 0.5 - Math.random())\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,cAAc,GAAGA,CAAA,KAAM;EAClC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;EACnD,OAAOF,KAAK,GAAG,IAAI,GAAG,KAAK;AAC7B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,QAAQ,GAAGA,CAAA,KAAM;EAC5B,MAAMH,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;EACnD,OAAOF,KAAK;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMI,QAAQ,GAAIJ,KAAK,IAAK;EACjC,IAAG,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC5B,MAAM,IAAIK,KAAK,CAAC,8BAA8B,CAAC;EACjD;EACAJ,YAAY,CAACK,OAAO,CAAC,eAAe,EAAEN,KAAK,CAAC;EAC5C,OAAOA,KAAK;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMO,UAAU,GAAGA,CAAA,KAAM;EAC9BN,YAAY,CAACO,UAAU,CAAC,eAAe,CAAC;EACxC,OAAO,IAAI;AACb,CAAC;AACD;AACA,OAAO,MAAMC,OAAO,GAAIC,KAAK,IAAKA,KAAK,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,GAAG,GAAGC,IAAI,CAACC,MAAM,EAAE,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
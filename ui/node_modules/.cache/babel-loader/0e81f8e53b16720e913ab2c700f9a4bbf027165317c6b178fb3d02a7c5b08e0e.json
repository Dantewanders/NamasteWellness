{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Emitter = void 0;\nconst MemoryLeakError_1 = require(\"./MemoryLeakError\");\n/**\n * Node.js-compatible implementation of `EventEmitter`.\n *\n * @example\n * const emitter = new Emitter<{ hello: [string] }>()\n * emitter.on('hello', (name) => console.log(name))\n * emitter.emit('hello', 'John')\n */\nclass Emitter {\n  constructor() {\n    this.events = new Map();\n    this.maxListeners = Emitter.defaultMaxListeners;\n    this.hasWarnedAboutPotentialMemoryLeak = false;\n  }\n  static listenerCount(emitter, eventName) {\n    return emitter.listenerCount(eventName);\n  }\n  _emitInternalEvent(internalEventName, eventName, listener) {\n    this.emit(internalEventName,\n    // Anything to make TypeScript happy.\n    ...[eventName, listener]);\n  }\n  _getListeners(eventName) {\n    return this.events.get(eventName) || [];\n  }\n  _removeListener(listeners, listener) {\n    const index = listeners.indexOf(listener);\n    if (index > -1) {\n      listeners.splice(index, 1);\n    }\n    return [];\n  }\n  _wrapOnceListener(eventName, listener) {\n    var _this = this;\n    const onceListener = function () {\n      _this.removeListener(eventName, onceListener);\n      for (var _len = arguments.length, data = new Array(_len), _key = 0; _key < _len; _key++) {\n        data[_key] = arguments[_key];\n      }\n      listener.apply(_this, data);\n    };\n    return onceListener;\n  }\n  setMaxListeners(maxListeners) {\n    this.maxListeners = maxListeners;\n    return this;\n  }\n  /**\n   * Returns the current max listener value for the `Emitter` which is\n   * either set by `emitter.setMaxListeners(n)` or defaults to\n   * `Emitter.defaultMaxListeners`.\n   */\n  getMaxListeners() {\n    return this.maxListeners;\n  }\n  /**\n   * Returns an array listing the events for which the emitter has registered listeners.\n   * The values in the array will be strings or Symbols.\n   */\n  eventNames() {\n    return Array.from(this.events.keys());\n  }\n  /**\n   * Synchronously calls each of the listeners registered for the event named `eventName`,\n   * in the order they were registered, passing the supplied arguments to each.\n   * Returns `true` if the event has listeners, `false` otherwise.\n   *\n   * @example\n   * const emitter = new Emitter<{ hello: [string] }>()\n   * emitter.emit('hello', 'John')\n   */\n  emit(eventName) {\n    for (var _len2 = arguments.length, data = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      data[_key2 - 1] = arguments[_key2];\n    }\n    const listeners = this._getListeners(eventName);\n    listeners.forEach(listener => {\n      listener.apply(this, data);\n    });\n    return listeners.length > 0;\n  }\n  addListener(eventName, listener) {\n    // Emit the `newListener` event before adding the listener.\n    this._emitInternalEvent('newListener', eventName, listener);\n    const nextListeners = this._getListeners(eventName).concat(listener);\n    this.events.set(eventName, nextListeners);\n    if (this.maxListeners > 0 && this.listenerCount(eventName) > this.maxListeners && !this.hasWarnedAboutPotentialMemoryLeak) {\n      this.hasWarnedAboutPotentialMemoryLeak = true;\n      const memoryLeakWarning = new MemoryLeakError_1.MemoryLeakError(this, eventName, this.listenerCount(eventName));\n      console.warn(memoryLeakWarning);\n    }\n    return this;\n  }\n  on(eventName, listener) {\n    return this.addListener(eventName, listener);\n  }\n  once(eventName, listener) {\n    return this.addListener(eventName, this._wrapOnceListener(eventName, listener));\n  }\n  prependListener(eventName, listener) {\n    const listeners = this._getListeners(eventName);\n    if (listeners.length > 0) {\n      const nextListeners = [listener].concat(listeners);\n      this.events.set(eventName, nextListeners);\n    } else {\n      this.events.set(eventName, listeners.concat(listener));\n    }\n    return this;\n  }\n  prependOnceListener(eventName, listener) {\n    return this.prependListener(eventName, this._wrapOnceListener(eventName, listener));\n  }\n  removeListener(eventName, listener) {\n    const listeners = this._getListeners(eventName);\n    if (listeners.length > 0) {\n      this._removeListener(listeners, listener);\n      this.events.set(eventName, listeners);\n      // Emit the `removeListener` event after removing the listener.\n      this._emitInternalEvent('removeListener', eventName, listener);\n    }\n    return this;\n  }\n  /**\n   * Alias for `emitter.removeListener()`.\n   *\n   * @example\n   * emitter.off('hello', listener)\n   */\n  off(eventName, listener) {\n    return this.removeListener(eventName, listener);\n  }\n  removeAllListeners(eventName) {\n    if (eventName) {\n      this.events.delete(eventName);\n    } else {\n      this.events.clear();\n    }\n    return this;\n  }\n  /**\n   * Returns a copy of the array of listeners for the event named `eventName`.\n   */\n  listeners(eventName) {\n    return Array.from(this._getListeners(eventName));\n  }\n  /**\n   * Returns the number of listeners listening to the event named `eventName`.\n   */\n  listenerCount(eventName) {\n    return this._getListeners(eventName).length;\n  }\n  rawListeners(eventName) {\n    return this.listeners(eventName);\n  }\n}\nexports.Emitter = Emitter;\nEmitter.defaultMaxListeners = 10;","map":{"version":3,"names":["Object","defineProperty","exports","value","Emitter","MemoryLeakError_1","require","constructor","events","Map","maxListeners","defaultMaxListeners","hasWarnedAboutPotentialMemoryLeak","listenerCount","emitter","eventName","_emitInternalEvent","internalEventName","listener","emit","_getListeners","get","_removeListener","listeners","index","indexOf","splice","_wrapOnceListener","_this","onceListener","removeListener","_len","arguments","length","data","Array","_key","apply","setMaxListeners","getMaxListeners","eventNames","from","keys","_len2","_key2","forEach","addListener","nextListeners","concat","set","memoryLeakWarning","MemoryLeakError","console","warn","on","once","prependListener","prependOnceListener","off","removeAllListeners","delete","clear","rawListeners"],"sources":["/home/dantewanders/Code/NamasteWellness/ui/node_modules/strict-event-emitter/lib/Emitter.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Emitter = void 0;\nconst MemoryLeakError_1 = require(\"./MemoryLeakError\");\n/**\n * Node.js-compatible implementation of `EventEmitter`.\n *\n * @example\n * const emitter = new Emitter<{ hello: [string] }>()\n * emitter.on('hello', (name) => console.log(name))\n * emitter.emit('hello', 'John')\n */\nclass Emitter {\n    constructor() {\n        this.events = new Map();\n        this.maxListeners = Emitter.defaultMaxListeners;\n        this.hasWarnedAboutPotentialMemoryLeak = false;\n    }\n    static listenerCount(emitter, eventName) {\n        return emitter.listenerCount(eventName);\n    }\n    _emitInternalEvent(internalEventName, eventName, listener) {\n        this.emit(internalEventName, \n        // Anything to make TypeScript happy.\n        ...[eventName, listener]);\n    }\n    _getListeners(eventName) {\n        return this.events.get(eventName) || [];\n    }\n    _removeListener(listeners, listener) {\n        const index = listeners.indexOf(listener);\n        if (index > -1) {\n            listeners.splice(index, 1);\n        }\n        return [];\n    }\n    _wrapOnceListener(eventName, listener) {\n        const onceListener = (...data) => {\n            this.removeListener(eventName, onceListener);\n            listener.apply(this, data);\n        };\n        return onceListener;\n    }\n    setMaxListeners(maxListeners) {\n        this.maxListeners = maxListeners;\n        return this;\n    }\n    /**\n     * Returns the current max listener value for the `Emitter` which is\n     * either set by `emitter.setMaxListeners(n)` or defaults to\n     * `Emitter.defaultMaxListeners`.\n     */\n    getMaxListeners() {\n        return this.maxListeners;\n    }\n    /**\n     * Returns an array listing the events for which the emitter has registered listeners.\n     * The values in the array will be strings or Symbols.\n     */\n    eventNames() {\n        return Array.from(this.events.keys());\n    }\n    /**\n     * Synchronously calls each of the listeners registered for the event named `eventName`,\n     * in the order they were registered, passing the supplied arguments to each.\n     * Returns `true` if the event has listeners, `false` otherwise.\n     *\n     * @example\n     * const emitter = new Emitter<{ hello: [string] }>()\n     * emitter.emit('hello', 'John')\n     */\n    emit(eventName, ...data) {\n        const listeners = this._getListeners(eventName);\n        listeners.forEach((listener) => {\n            listener.apply(this, data);\n        });\n        return listeners.length > 0;\n    }\n    addListener(eventName, listener) {\n        // Emit the `newListener` event before adding the listener.\n        this._emitInternalEvent('newListener', eventName, listener);\n        const nextListeners = this._getListeners(eventName).concat(listener);\n        this.events.set(eventName, nextListeners);\n        if (this.maxListeners > 0 &&\n            this.listenerCount(eventName) > this.maxListeners &&\n            !this.hasWarnedAboutPotentialMemoryLeak) {\n            this.hasWarnedAboutPotentialMemoryLeak = true;\n            const memoryLeakWarning = new MemoryLeakError_1.MemoryLeakError(this, eventName, this.listenerCount(eventName));\n            console.warn(memoryLeakWarning);\n        }\n        return this;\n    }\n    on(eventName, listener) {\n        return this.addListener(eventName, listener);\n    }\n    once(eventName, listener) {\n        return this.addListener(eventName, this._wrapOnceListener(eventName, listener));\n    }\n    prependListener(eventName, listener) {\n        const listeners = this._getListeners(eventName);\n        if (listeners.length > 0) {\n            const nextListeners = [listener].concat(listeners);\n            this.events.set(eventName, nextListeners);\n        }\n        else {\n            this.events.set(eventName, listeners.concat(listener));\n        }\n        return this;\n    }\n    prependOnceListener(eventName, listener) {\n        return this.prependListener(eventName, this._wrapOnceListener(eventName, listener));\n    }\n    removeListener(eventName, listener) {\n        const listeners = this._getListeners(eventName);\n        if (listeners.length > 0) {\n            this._removeListener(listeners, listener);\n            this.events.set(eventName, listeners);\n            // Emit the `removeListener` event after removing the listener.\n            this._emitInternalEvent('removeListener', eventName, listener);\n        }\n        return this;\n    }\n    /**\n     * Alias for `emitter.removeListener()`.\n     *\n     * @example\n     * emitter.off('hello', listener)\n     */\n    off(eventName, listener) {\n        return this.removeListener(eventName, listener);\n    }\n    removeAllListeners(eventName) {\n        if (eventName) {\n            this.events.delete(eventName);\n        }\n        else {\n            this.events.clear();\n        }\n        return this;\n    }\n    /**\n     * Returns a copy of the array of listeners for the event named `eventName`.\n     */\n    listeners(eventName) {\n        return Array.from(this._getListeners(eventName));\n    }\n    /**\n     * Returns the number of listeners listening to the event named `eventName`.\n     */\n    listenerCount(eventName) {\n        return this._getListeners(eventName).length;\n    }\n    rawListeners(eventName) {\n        return this.listeners(eventName);\n    }\n}\nexports.Emitter = Emitter;\nEmitter.defaultMaxListeners = 10;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"//The base url of the API, can be changed in the .env file\nconst baseUrl = process.env.REACT_APP_API_URL || \"http://localhost:9000\";\n\n/**\n * Sends a login request to the api for a user with the provided username and password.\n *\n * @async\n * @function\n * @param {Object} data - An object containing the user's login credentials.\n * @param {string} data.username - The user's username.\n * @param {string} data.password - The user's password.\n * @returns {Promise<Object>} - A promise that resolves with the user's data.\n * @throws {Error} - Throws an error if there was an issue with the login request.\n */\nexport const login = async data => {\n  const {\n    username,\n    password\n  } = data;\n  const response = await fetch(`${baseUrl}/auth/login`, {\n    method: \"POST\",\n    headers: new Headers({\n      Authorization: `Basic ${btoa(`${username}:${password}`)}` //btoa is only deprecated in Node.js not in browser environments!\n    })\n  });\n\n  const responseData = await response.json();\n  if (!response.ok) {\n    throw new Error(`Status Code: ${response === null || response === void 0 ? void 0 : response.status} - ${responseData === null || responseData === void 0 ? void 0 : responseData.message}`);\n  }\n  return responseData;\n};\n\n/**\n * Sends a registration request to the api for a user with the provided data.\n *\n * @async\n * @function\n * @param {Object} data - An object containing the user's data require to create an account.\n * @param {string} data.username - The user's username\n * @param {string} data.password - The user's password\n * @param {*} data.[...] - Any additional user data required for account creation\n * @returns {Promise<Object>} - A promise that resolves with the user's data.\n * @throws {Error} - Throws an error if there was an issue with the login request.\n */\nexport const register = async data => {\n  const response = await fetch(`${baseUrl}/auth/register`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(data)\n  });\n  const responseData = await response.json();\n  if (!response.ok) {\n    throw new Error(`Status Code: ${response === null || response === void 0 ? void 0 : response.status} - ${responseData === null || responseData === void 0 ? void 0 : responseData.message}`);\n  }\n  return responseData;\n};\nexport const getUserProfile = async username => {\n  console.log(`${baseUrl}/user/${username}`);\n  const response = await fetch(`${baseUrl}/user/username/${username}`, {\n    method: \"GET\"\n  });\n  const responseData = await response.json();\n  if (!response.ok) {\n    throw new Error(`Status Code: ${response === null || response === void 0 ? void 0 : response.status} - ${responseData === null || responseData === void 0 ? void 0 : responseData.message}`);\n  }\n  return responseData;\n};\nexport const getUser = async token => {\n  const response = await fetch(`${baseUrl}/user/token`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  });\n  const responseData = await response.json();\n  if (!response.ok) {\n    throw new Error(`Status Code: ${response === null || response === void 0 ? void 0 : response.status} - ${responseData === null || responseData === void 0 ? void 0 : responseData.message}`);\n  }\n  return responseData;\n};\nexport const updatePassword = async (token, data) => {\n  const response = await fetch(`${baseUrl}/auth/updatePassword`, {\n    method: \"post\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify(data)\n  });\n  const responseData = await response.json();\n  if (!response.ok) {\n    throw new Error(`Status Code: ${response === null || response === void 0 ? void 0 : response.status} - ${responseData === null || responseData === void 0 ? void 0 : responseData.message}`);\n  }\n  return responseData;\n};","map":{"version":3,"names":["baseUrl","process","env","REACT_APP_API_URL","login","data","username","password","response","fetch","method","headers","Headers","Authorization","btoa","responseData","json","ok","Error","status","message","register","body","JSON","stringify","getUserProfile","console","log","getUser","token","updatePassword"],"sources":["/home/dantewanders/Code/NamasteWellness/ui/src/utility/api.js"],"sourcesContent":["//The base url of the API, can be changed in the .env file\nconst baseUrl = process.env.REACT_APP_API_URL || \"http://localhost:9000\";\n\n/**\n * Sends a login request to the api for a user with the provided username and password.\n *\n * @async\n * @function\n * @param {Object} data - An object containing the user's login credentials.\n * @param {string} data.username - The user's username.\n * @param {string} data.password - The user's password.\n * @returns {Promise<Object>} - A promise that resolves with the user's data.\n * @throws {Error} - Throws an error if there was an issue with the login request.\n */\nexport const login = async (data) => {\n  const { username, password } = data;\n\n  const response = await fetch(`${baseUrl}/auth/login`, {\n    method: \"POST\",\n    headers: new Headers({\n      Authorization: `Basic ${btoa(`${username}:${password}`)}`, //btoa is only deprecated in Node.js not in browser environments!\n    }),\n  });\n\n  const responseData = await response.json();\n\n  if (!response.ok) {\n    throw new Error(\n      `Status Code: ${response?.status} - ${responseData?.message}`\n    );\n  }\n\n  return responseData;\n};\n\n/**\n * Sends a registration request to the api for a user with the provided data.\n *\n * @async\n * @function\n * @param {Object} data - An object containing the user's data require to create an account.\n * @param {string} data.username - The user's username\n * @param {string} data.password - The user's password\n * @param {*} data.[...] - Any additional user data required for account creation\n * @returns {Promise<Object>} - A promise that resolves with the user's data.\n * @throws {Error} - Throws an error if there was an issue with the login request.\n */\nexport const register = async (data) => {\n  const response = await fetch(`${baseUrl}/auth/register`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(data),\n  });\n\n  const responseData = await response.json();\n\n  if (!response.ok) {\n    throw new Error(\n      `Status Code: ${response?.status} - ${responseData?.message}`\n    );\n  }\n\n  return responseData;\n};\n\nexport const getUserProfile = async (username) => {\n  console.log(`${baseUrl}/user/${username}`);\n  const response = await fetch(`${baseUrl}/user/username/${username}`, {\n    method: \"GET\",\n  });\n\n  const responseData = await response.json();\n\n  if (!response.ok) {\n    throw new Error(\n      `Status Code: ${response?.status} - ${responseData?.message}`\n    );\n  }\n\n  return responseData;\n};\n\nexport const getUser = async (token) => {\n  const response = await fetch(`${baseUrl}/user/token`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`,\n    },\n  });\n\n  const responseData = await response.json();\n\n  if (!response.ok) {\n    throw new Error(\n      `Status Code: ${response?.status} - ${responseData?.message}`\n    );\n  }\n\n  return responseData;\n};\n\nexport const updatePassword = async (token, data) => {\n  const response = await fetch(`${baseUrl}/auth/updatePassword`, {\n    method: \"post\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(data),\n  });\n\n  const responseData = await response.json();\n\n  if (!response.ok) {\n    throw new Error(\n      `Status Code: ${response?.status} - ${responseData?.message}`\n    );\n  }\n\n  return responseData;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/home/dantewanders/Code/Templates/CapstoneTemplate/ui/src/views/Gamemodes/Game/Question.js\",\n  _s = $RefreshSig$();\nimport { Fragment, useEffect, useState } from 'react';\nimport { Grid } from '@mui/material';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport { shuffle } from '../../../utility/utils';\nimport Timer from './Timer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Question(props) {\n  _s();\n  // pass questions in as props\n  const {\n    question,\n    checkAnswer,\n    highlight\n  } = props;\n  //  console.log(\"highlight: \", highlight)\n\n  const [shuffledAnswers, setShuffledAnswers] = useState(null);\n  const [progress, setProgress] = useState(100);\n  const pauseTimer = () => {\n    setProgress(0);\n  };\n  const handleClick = selected => {\n    // console.log(selected)\n    checkAnswer(selected);\n    pauseTimer();\n  };\n  useEffect(() => {\n    console.log(question);\n    if (!question) {\n      return;\n    }\n    const answers = [{\n      key: 'correct',\n      value: question.correctAnswer\n    }, {\n      key: 'incorrect 1',\n      value: question.incorrectAnswer1\n    }, {\n      key: 'incorrect 2',\n      value: question.incorrectAnswer2\n    }, {\n      key: 'incorrect 3',\n      value: question.incorrectAnswer3\n    }];\n    setShuffledAnswers(shuffle(answers));\n  }, [question]);\n  if (!shuffledAnswers) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Shuffling...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 12\n    }, this);\n  }\n  // console.log(shuffledAnswers)\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    direction: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    spacing: 5,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        sx: {\n          width: '700px',\n          background: '#D3D3D3',\n          height: '150px',\n          ml: '50px',\n          mr: '50px',\n          mt: '20px',\n          boxShadow: '3px 2px 7px rgb(0, 0, 0, 0.5)'\n        },\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            sx: {\n              fontSize: 22\n            },\n            align: \"center\",\n            children: question.question\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      children: /*#__PURE__*/_jsxDEV(Timer, {\n        duration: 10,\n        checkAnswer: checkAnswer,\n        question: question,\n        shuffledAnswers: shuffledAnswers,\n        progress: progress,\n        setProgress: setProgress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        direction: \"row\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        spacing: 2,\n        children: shuffledAnswers.map(answer => {\n          return /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            item: true,\n            direction: \"column\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            xs: 5,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: highlight ? answer.key === 'correct' ? \"success\" : \"error\" : \"primary\",\n              onClick: () => handleClick(answer.key),\n              style: {\n                maxWidth: '350px',\n                maxHeight: '150px',\n                minWidth: '350px',\n                minHeight: '75px',\n                fontWeight: 'bold',\n                fontSize: '16px'\n              },\n              children: answer.value\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 17\n            }, this)\n          }, answer.key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(Question, \"zms8r4jQjBy4ye4fPXuwy27sfvk=\");\n_c = Question;\nexport default Question;\nvar _c;\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"names":["Fragment","useEffect","useState","Grid","Card","CardContent","Button","Typography","shuffle","Timer","jsxDEV","_jsxDEV","Question","props","_s","question","checkAnswer","highlight","shuffledAnswers","setShuffledAnswers","progress","setProgress","pauseTimer","handleClick","selected","console","log","answers","key","value","correctAnswer","incorrectAnswer1","incorrectAnswer2","incorrectAnswer3","children","fileName","_jsxFileName","lineNumber","columnNumber","container","direction","justifyContent","alignItems","spacing","item","sx","width","background","height","ml","mr","mt","boxShadow","fontSize","align","duration","map","answer","xs","variant","color","onClick","style","maxWidth","maxHeight","minWidth","minHeight","fontWeight","_c","$RefreshReg$"],"sources":["/home/dantewanders/Code/Templates/CapstoneTemplate/ui/src/views/Gamemodes/Game/Question.js"],"sourcesContent":["import { Fragment, useEffect, useState } from 'react'\nimport { Grid } from '@mui/material';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport { shuffle } from '../../../utility/utils';\nimport Timer from './Timer';\n\nfunction Question(props) {\n\n  // pass questions in as props\n  const { \n    question,\n    checkAnswer,\n    highlight\n   } = props\n  //  console.log(\"highlight: \", highlight)\n\n  const [shuffledAnswers, setShuffledAnswers] = useState(null)\n  const [progress, setProgress] = useState(100)\n\n  const pauseTimer = () => {\n    setProgress(0)\n  }\n\n  const handleClick = (selected) => {\n    // console.log(selected)\n    checkAnswer(selected)\n    pauseTimer()\n  }\n\n  useEffect(() => {\n    console.log(question)\n    if (!question) {\n      return\n    }\n    const answers = [\n      {key: 'correct', value: question.correctAnswer}, \n      {key: 'incorrect 1', value: question.incorrectAnswer1}, \n      {key: 'incorrect 2', value: question.incorrectAnswer2}, \n      {key: 'incorrect 3', value: question.incorrectAnswer3}]\n\n      setShuffledAnswers(shuffle(answers))\n\n  }, [question])\n\n  if(!shuffledAnswers) {\n    return <div>Shuffling...</div>\n  }\n  // console.log(shuffledAnswers)\n  return (\n    \n    <Grid\n      container\n      direction=\"column\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      spacing={5}\n    >\n\n    {/* question component\n      Create a card with the text of the trivia question \n    */}\n      <Grid item>\n        <Card sx={{ \n          width: '700px', \n          background: '#D3D3D3', \n          height: '150px', \n          ml:'50px', mr: '50px', mt: '20px', \n          boxShadow:'3px 2px 7px rgb(0, 0, 0, 0.5)',\n          }}>\n          \n          <CardContent>\n            <Typography \n              sx={{ fontSize: 22 }} \n              align='center'\n            >\n              {question.question}\n            </Typography>\n          \n          </CardContent>\n        </Card>\n      </Grid>\n    \n    {/* question timer */}\n    <Grid item>\n      <Timer\n      duration={10}\n      checkAnswer={checkAnswer}\n      question={question}\n      shuffledAnswers={shuffledAnswers}\n      progress={progress}\n      setProgress={setProgress}\n      />\n    </Grid>\n\n    {/* 4 clickable answer components \n      make a grid to equally space answers\n      make a button for each answer with the text of the answer\n      if the user selects the correct answer, highlight green\n    */}\n      <Grid item>\n        <Grid\n          container\n          direction=\"row\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          spacing={2}\n        >\n          {shuffledAnswers.map((answer) => {\n            return (\n              <Grid container item \n                key={answer.key} \n                direction=\"column\" \n                alignItems=\"center\" \n                justifyContent=\"center\" \n                xs={5}>\n                <Button \n                  variant=\"contained\" \n                  color={ highlight ? answer.key === 'correct' ? \"success\" : \"error\" : \"primary\"} \n                  onClick={() => handleClick(answer.key)}\n                  style={{maxWidth: '350px', maxHeight: '150px', minWidth: '350px', minHeight: '75px', fontWeight: 'bold', fontSize:'16px'}}>\n                    {answer.value}\n                </Button>\n              </Grid>\n              )\n          })}\n        </Grid>\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default Question\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}